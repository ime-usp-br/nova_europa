# =============================================================================
# Nova Europa - Production Docker Compose Configuration
# =============================================================================
#
# This configuration is optimized for production deployment with:
# - Resource limits and constraints
# - Health checks on all services
# - Restart policies for high availability
# - Volume persistence for data
# - Redis for caching and sessions
# - Nginx as reverse proxy
#
# Usage:
#   docker-compose -f docker-compose.prod.yml up -d
#
# Prerequisites:
#   - .env.production file configured with production credentials
#   - SSL certificates (if using HTTPS)
#   - Backups configured for MySQL volumes
# =============================================================================

services:
  # ===========================================================================
  # Application Service (PHP-FPM)
  # ===========================================================================
  app:
    build:
      context: .
      dockerfile: docker/production/Dockerfile
      args:
        WWWGROUP: '${WWWGROUP:-1000}'
        WWWUSER: '${WWWUSER:-1000}'
    image: 'nova-europa:${APP_VERSION:-latest}'
    container_name: nova-europa-app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Laravel environment
      APP_ENV: production
      APP_DEBUG: 'false'
      LOG_CHANNEL: stack
      LOG_LEVEL: ${LOG_LEVEL:-warning}

      # Database
      DB_HOST: mysql
      DB_PORT: 3306

      # Cache and Sessions
      CACHE_STORE: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # Replicado configuration
      REPLICADO_HOST: ${REPLICADO_HOST}
      REPLICADO_PORT: ${REPLICADO_PORT}

      # Supervisor
      SUPERVISOR_PHP_USER: www-data
    volumes:
      # Persistent storage
      - storage-data:/var/www/html/storage
      - cache-data:/var/www/html/bootstrap/cache
      # Puppeteer cache
      - puppeteer-cache:/var/www/.cache/puppeteer
      # Logs (optional: can be redirected to stdout/stderr)
      - logs-data:/var/www/html/storage/logs
    networks:
      - nova-europa-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "php", "artisan", "inspire"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ===========================================================================
  # Nginx Web Server
  # ===========================================================================
  nginx:
    image: nginx:1.27-alpine
    container_name: nova-europa-nginx
    restart: unless-stopped
    ports:
      - '${APP_PORT:-8016}:80'
      # Uncomment for HTTPS
      # - '${APP_SSL_PORT:-443}:443'
    volumes:
      # Nginx configuration
      - ./docker/production/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # Static files from app container
      - storage-data:/var/www/html/storage:ro
      - ./public:/var/www/html/public:ro
      # SSL certificates (if using HTTPS)
      # - ./docker/production/ssl:/etc/nginx/ssl:ro
      # Nginx cache
      - nginx-cache:/var/cache/nginx
      # Logs
      - nginx-logs:/var/log/nginx
    networks:
      - nova-europa-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # ===========================================================================
  # MySQL Database
  # ===========================================================================
  mysql:
    image: mysql:8.0
    container_name: nova-europa-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASSWORD:-secret}'
      MYSQL_DATABASE: '${DB_DATABASE:-europa}'
      MYSQL_USER: '${DB_USERNAME:-europa_user}'
      MYSQL_PASSWORD: '${DB_PASSWORD:-secret}'
      MYSQL_ROOT_HOST: '%'
    ports:
      # Only expose if needed for external access (e.g., backups, monitoring)
      - '${FORWARD_DB_PORT:-3306}:3306'
    volumes:
      - mysql-data:/var/lib/mysql
      # MySQL configuration
      - ./docker/production/mysql.cnf:/etc/mysql/conf.d/custom.cnf:ro
      # Backup directory
      - mysql-backups:/backups
    networks:
      - nova-europa-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-secret}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    command:
      - '--default-authentication-plugin=mysql_native_password'
      - '--character-set-server=utf8mb4'
      - '--collation-server=utf8mb4_unicode_ci'
      - '--max_connections=200'
      - '--innodb_buffer_pool_size=512M'

  # ===========================================================================
  # Redis Cache
  # ===========================================================================
  redis:
    image: redis:7-alpine
    container_name: nova-europa-redis
    restart: unless-stopped
    ports:
      # Only expose if needed for monitoring
      - '${FORWARD_REDIS_PORT:-6379}:6379'
    volumes:
      - redis-data:/data
    networks:
      - nova-europa-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    command: redis-server --appendonly yes --maxmemory 200mb --maxmemory-policy allkeys-lru

  # ===========================================================================
  # Queue Worker (Laravel Queue)
  # ===========================================================================
  queue:
    build:
      context: .
      dockerfile: docker/production/Dockerfile
      args:
        WWWGROUP: '${WWWGROUP:-1000}'
        WWWUSER: '${WWWUSER:-1000}'
    image: 'nova-europa:${APP_VERSION:-latest}'
    container_name: nova-europa-queue
    restart: unless-stopped
    env_file:
      - .env
    environment:
      APP_ENV: production
      APP_DEBUG: 'false'
      CONTAINER_ROLE: queue
      DB_HOST: mysql
      REDIS_HOST: redis
    volumes:
      - storage-data:/var/www/html/storage
      - cache-data:/var/www/html/bootstrap/cache
      - logs-data:/var/www/html/storage/logs
    networks:
      - nova-europa-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: php artisan queue:work --tries=3 --timeout=300 --max-jobs=1000 --max-time=3600
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # ===========================================================================
  # Scheduler (Laravel Cron)
  # ===========================================================================
  scheduler:
    build:
      context: .
      dockerfile: docker/production/Dockerfile
      args:
        WWWGROUP: '${WWWGROUP:-1000}'
        WWWUSER: '${WWWUSER:-1000}'
    image: 'nova-europa:${APP_VERSION:-latest}'
    container_name: nova-europa-scheduler
    restart: unless-stopped
    env_file:
      - .env
    environment:
      APP_ENV: production
      APP_DEBUG: 'false'
      CONTAINER_ROLE: scheduler
      DB_HOST: mysql
      REDIS_HOST: redis
    volumes:
      - storage-data:/var/www/html/storage
      - cache-data:/var/www/html/bootstrap/cache
      - logs-data:/var/www/html/storage/logs
    networks:
      - nova-europa-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "while true; do
        php artisan schedule:run --verbose --no-interaction &
        sleep 60
      done"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

# =============================================================================
# Networks
# =============================================================================
networks:
  nova-europa-network:
    driver: bridge
    name: nova-europa-network
    ipam:
      config:
        - subnet: ${DOCKER_NETWORK_SUBNET:-172.27.0.0/16}
          gateway: ${DOCKER_NETWORK_GATEWAY:-172.27.0.1}


# =============================================================================
# Volumes (Persistent Data)
# =============================================================================
volumes:
  # Application data
  storage-data:
    driver: local
    name: nova-europa-storage
  cache-data:
    driver: local
    name: nova-europa-cache
  logs-data:
    driver: local
    name: nova-europa-logs

  # Puppeteer cache
  puppeteer-cache:
    driver: local
    name: nova-europa-puppeteer

  # Database
  mysql-data:
    driver: local
    name: nova-europa-mysql-data
  mysql-backups:
    driver: local
    name: nova-europa-mysql-backups

  # Redis
  redis-data:
    driver: local
    name: nova-europa-redis-data

  # Nginx
  nginx-cache:
    driver: local
    name: nova-europa-nginx-cache
  nginx-logs:
    driver: local
    name: nova-europa-nginx-logs
